USE [master]
GO

/*Create database*/
IF NOT EXISTS (SELECT * FROM master.dbo.sysdatabases WHERE '[' + name + ']' = 'SUPdb' OR name = 'SUPdb')
   exec('CREATE DATABASE [SUPdb] CONTAINMENT = NONE')
GO

/* create User If possible */
USE [master];

--CREATE LOGIN teamRADGSHAUser
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'SUPuser')
   exec('CREATE LOGIN SUPuser WITH PASSWORD = ''abc123'';')
GO

USE [SUPdb]

--create user
IF USER_ID('SUPuser') IS NULL exec('CREATE USER [SUPuser] FOR LOGIN [SUPuser]')
GO

--update roles
CREATE ROLE executeSP
GRANT EXECUTE TO executeSP
ALTER ROLE [executeSP] ADD MEMBER [SUPuser]
GO

--create tables
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Account')
CREATE TABLE Account ( [User_Name] varchar(25), [Password] varchar(64), User_Type char, Failed_Login int, Office varchar(50), 
CONSTRAINT PK_Staff PRIMARY KEY ([User_Name]) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Client')
CREATE TABLE Client ( ID int not null IDENTITY(1,1) PRIMARY KEY, Prefix varchar(10) Last_Name varchar(50), First_Name varchar(50), Middle_initial char, Permit_Num varchar(10), Active bit, Notes varchar(30))

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Address')
CREATE TABLE Address ( Client_ID int, Line1 varchar(35), Line2 varchar(35), City varchar(25), State char(2), Zip char(5), 
CONSTRAINT PK_Address PRIMARY KEY ( Client_ID, Line1, Line2, City, State, Zip ), 
CONSTRAINT FK_Address_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Phone')
CREATE TABLE Phone ( Client_ID int, [Number] varchar(11), CONSTRAINT PK_Phone PRIMARY KEY ( Client_ID, Number ),
CONSTRAINT FK_Phone_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Email')
CREATE TABLE Email ( Client_ID int, [Email] varchar(30), CONSTRAINT PK_Email PRIMARY KEY ( Client_ID, Email ), 
CONSTRAINT FK_Email_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Organization')
CREATE TABLE Organization ( [Name] varchar(30), [Type] varchar(20), 
CONSTRAINT PK_Organization PRIMARY KEY ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Works_For')
CREATE TABLE Works_For ( Client_ID int, Org_Name varchar(30), Org_Type varchar(20), Title varchar(20), 
CONSTRAINT PK_Works_For PRIMARY KEY ( Client_ID, Org_Name, Org_Type ), 
CONSTRAINT FK_Works_For_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID), 
CONSTRAINT FK_Works_For_Organization FOREIGN KEY (Org_Name, Org_type) REFERENCES Organization ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Assists')
CREATE TABLE Assists ( Boss_ID int, Assistant_ID int, Notes varchar(30), 
CONSTRAINT PK_Assists PRIMARY KEY ( Boss_ID, Assistant_ID ), 
CONSTRAINT FK_Assists_Boss_Client FOREIGN KEY (Boss_ID) REFERENCES Client (ID), 
CONSTRAINT FK_Assists_Assustant_Client FOREIGN KEY (Assistant_ID) REFERENCES Client (ID) )

GO

/*CREATE PROCEDURE Verify_Login @username nvarchar(25), @password varchar(50) AS BEGIN IF EXISTS (SELECT User_Name, User_Type FROM Account WHERE User_Name = @username AND Password = @password) BEGIN SELECT User_Name, User_Type, Failed_Login FROM Account WHERE User_Name = @username AND Password = @password END ELSE BEGIN IF EXISTS (SELECT User_Name, User_Type FROM Account WHERE User_Name = @username) BEGIN UPDATE Account SET Failed_Login = Failed_Login + 1 WHERE User_Name = @username END END END

GO*/

-- =============================================
-- Create date: 10/7/2019
-- Description:	verifies login
-- =============================================

CREATE OR ALTER PROCEDURE validateLogin

	-- Add the parameters for the stored procedure here
	@userName varchar(50), @givenPW varchar(64)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here

	DECLARE @isValid BIT
	IF EXISTS(SELECT * FROM Account WHERE @userName = [User_Name] AND @givenPW = [Password]) SET @isValid = 1
	ELSE SET @isValid = 0
	SELECT @isValid

END
GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	Takes 3 variables and returns clients that begin with the given variables. Input variables are allowed to be nulled.
-- =============================================
CREATE OR ALTER PROCEDURE queryClient
	-- Add the parameters for the stored procedure here
	@lastName varchar(50) = '', @firstName nvarchar(30) = '',
	@orgType varchar(30) = ''

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	BEGIN
	IF @orgType = ''
		SELECT * FROM Client LEFT JOIN Works_For ON Client.ID = Works_For.Client_ID WHERE First_Name LIKE (@firstName + '%') AND Last_Name LIKE (@lastName + '%') ORDER BY Last_Name, First_Name, Middle_initial
	else
		SELECT * FROM Client LEFT JOIN Works_For ON Client.ID = Works_For.Client_ID WHERE First_Name LIKE (@firstName + '%') AND Last_Name LIKE (@lastName + '%') AND Org_type LIKE (@orgType + '%') ORDER BY Last_Name, First_Name, Middle_initial, Org_Type
	END

END

-- =============================================
-- Create date: 10/7/2019
-- Description:	adds a client into the client table
-- =============================================

CREATE OR ALTER PROCEDURE addCLient

	-- Add the parameters for the stored procedure here
	@firstName varchar(50) = null, @lastName varchar(50) = null,
	@middleInitial varchar(1) = null, @permitNum varchar(50) = null,
	@active bit = 1, @notes varchar(30) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Client (First_Name, Last_Name, Middle_initial, Permit_Num, Active, Notes) VALUES (@firstName, @lastName, @middleInitial, @permitNum, @active, @notes)
	

END
GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	checks for a near match and sends the match if difference is >=3. Also reports the client where the difference function is >=3
-- =============================================

CREATE OR ALTER PROCEDURE checkForNearMatch

	-- Add the parameters for the stored procedure here
	@firstName varchar(50) = null, @lastName varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @nearMatch BIT
	IF ((SELECT COUNT(First_Name) FROM Client WHERE DIFFERENCE(@firstName, First_Name) > 2 AND DIFFERENCE(@lastName, Last_Name) > 2) > 0) SET @nearMatch = 1
	ELSE SET @nearMatch = 0

	SELECT @nearMatch AS nearMatch

	SELECT First_Name, Last_Name FROM Client WHERE DIFFERENCE(@firstName, First_Name) > 2 AND DIFFERENCE(@lastName, Last_Name) > 2

END


-- =============================================
-- Create date: 10/9/2019
-- Description:	adds an Organization
-- =============================================

CREATE OR ALTER PROCEDURE addOrganization

	-- Add the parameters for the stored procedure here
	@name varchar(30) = null, 
	@type varchar(10) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Organization (Name,Type) VALUES (@name, @type)
	

END
GO

-- =============================================
-- Create date: 10/10/2019
-- Description:	Adds a user to the Account table
-- =============================================
CREATE OR ALTER PROCEDURE addAccount 
	-- Add the parameters for the stored procedure here
	@userName varchar(25), @password varchar(64) null,
	@userType char(1) = null, @office varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Account(User_Name, Password, User_Type, Office) VALUES (@userName, @password, @userType, @office)
END
GO

-- =============================================
-- Create date: 10/12/2019
-- Description:	Returns a single client by searching for the ID
-- =============================================
CREATE OR ALTER   PROCEDURE getClientByID
	-- Add the parameters for the stored procedure here
    @Client_Id int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	SELECT * FROM Client WHERE ID = @Client_Id 

END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Create date: 10/12/2019
-- Description:	updates tables based on parameters given
-- =============================================

ALTER   PROCEDURE [dbo].[updateClient]
	-- Add the parameters for the stored procedure here
	@ID int, @firstName varchar(50) = null, 
	@lastName varchar(50) = null, @middleInitial varchar(1) = null,
	@permitNum varchar(50) = null, @active bit = null, 
	@notes varchar(30) = null, @orgName varchar(30), 
	@orgType varchar(10), @title varchar(20) = null, 
	@phoneNumber varchar(11) = null, @email varchar(30), 
	@line1 varchar(35) = null, @line2 varchar(35) = null, 
	@city varchar(25) = null, @state varchar(2) = null, 
	@zipCode varchar(5) = null, @boss int = null, 
	@assistant int = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- update values in the tables.
	IF @firstName IS NOT NULL 
		UPDATE Client SET First_Name = @firstName WHERE ID = @ID
	IF @lastName IS NOT NULL 
		UPDATE Client SET Last_Name = @lastName WHERE ID = @ID
	IF @middleInitial IS NOT NULL 
		UPDATE Client SET Middle_initial = @middleInitial WHERE ID = @ID
	IF @permitNum IS NOT NULL 
		UPDATE Client SET Permit_Num = @permitNum WHERE ID = @ID
	IF @active IS NOT NULL 
		UPDATE Client SET Permit_Num = @active WHERE ID = @ID
	IF @notes IS NOT NULL 
		UPDATE Client SET Notes = @notes WHERE ID = @ID
	-- 
	IF (SELECT COUNT(*) FROM Organization WHERE [Name] = @orgName AND [Type] = @orgType) = 0 
		INSERT INTO Organization([Name], [Type]) VALUES(@orgName, @orgType)
	IF @orgName IS NOT NULL OR @orgType IS NOT NULL 
		UPDATE Organization SET [Name] = @orgName, [Type] = @orgType 
			WHERE [Name] = @orgName AND [Type] = @orgType
	IF @title IS NOT NULL 
		UPDATE Works_For SET Title = @title 
			WHERE Client_ID = @ID AND Org_Name = @orgName AND Org_Type = @orgType
	--
	IF (SELECT COUNT(*) FROM Phone WHERE Client_ID = @ID AND Number = @phoneNumber) = 0 
		INSERT INTO Phone(Client_ID, Number) VALUES(@ID, @phoneNumber)
	IF @phoneNumber IS NOT NULL 
		UPDATE Phone SET Number = @phoneNumber 
			WHERE Client_ID = @ID AND Number = @phoneNumber
	--
	IF (SELECT COUNT(*) FROM Email WHERE Client_ID = @ID AND Email = @email) = 0 
		INSERT INTO Email(Client_ID, Email) VALUES(@ID, @email)
	IF @email IS NOT NULL 
		UPDATE Email SET Email = @email 
			WHERE Client_ID = @ID AND Email = @email
	--
	IF (SELECT COUNT(*) FROM [Address] WHERE Client_ID = @ID AND Line1 = @line1 AND Line2 = @line2 AND City = @city AND [State] = @state AND Zip = @zipCode) = 0 
		INSERT INTO Address(Client_ID, Line1, Line2, City, [State], Zip) VALUES(@ID, @line1, @line2, @city, @state, @zipCode)
	IF @line1 IS NOT NULL OR @line2 IS NOT NULL OR @city IS NOT NULL OR @state IS NOT NULL OR @zipCode IS NOT NULL 
		UPDATE [Address] SET Line1 = @line1, Line2 = @line2, City = @city, [State] = @state, Zip = @zipCode
			WHERE Client_ID = @ID AND Line1 = @line1 AND Line2 = @line2 AND City = @city AND [State] = @state AND Zip = @zipCode
	-- 
	IF (SELECT COUNT(*) FROM Assists WHERE Boss_ID = @boss AND Assistant_ID = @assistant) = 0 
		INSERT INTO Assists(Boss_ID, Assistant_ID) VALUES(@boss, @assistant)
	IF @boss IS NOT NULL OR @assistant IS NOT NULL 
		Update Assists SET Boss_ID = @boss, Assistant_ID = @assistant 
			WHERE Boss_ID = @boss AND Assistant_ID = @assistant

END

-- =============================================
-- Create date: 10/16/2019
-- Description:	Updates active status
-- =============================================

CREATE OR ALTER PROCEDURE updateActiveStatus

	-- Add the parameters for the stored procedure here
	@ID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	IF ((SELECT Active FROM Client Client WHERE @ID = ID) = 1) UPDATE Client SET Active = 0 WHERE @ID = ID
	ELSE UPDATE Client SET Active = 1

END
