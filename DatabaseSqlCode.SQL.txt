USE [master]

GO

/*Create database*/
IF NOT EXISTS (SELECT * FROM master.dbo.sysdatabases WHERE '[' + name + ']' = 'SUPdb' OR name = 'SUPdb')
   exec('CREATE DATABASE [SUPdb] CONTAINMENT = NONE')
GO

/* create User If possible */
--CREATE LOGIN teamRADGSHAUser
USE [master]
IF EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'SUPuser') DROP LOGIN [SUPuser]
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'SUPuser')
   exec('CREATE LOGIN SUPuser WITH PASSWORD = ''abc123''')
GO

--create user
USE [SUPdb]
IF USER_ID('SUPuser') IS NULL exec('CREATE USER [SUPuser] FOR LOGIN [SUPuser]')
GO

--update roles
GRANT EXECUTE TO SUPuser
GO

--create tables
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Account')
CREATE TABLE Account (
  User_Name varchar(25),
  Salt CHAR(25),
  Password binary(64),
  User_Type char(1),
  Failed_Login int,
  Office varchar(50)
  CONSTRAINT PK_SecurityAccounts PRIMARY KEY (User_Name)
)

IF NOT EXISTS (SELECT *  FROM sys.indexes  WHERE name='Index_SecurityAccounts' 
    AND object_id = OBJECT_ID('Account'))
CREATE UNIQUE INDEX Index_SecurityAccounts
    ON dbo.Account (User_Name) INCLUDE (Salt, Password)
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AccountAudits')
CREATE TABLE AccountAudits(
    ChangeID INT IDENTITY PRIMARY KEY,
    User_Name varchar(25) NOT NULL,
	User_Type CHAR(1) NOT NULL,
    Failed_Login INT NULL,
    office varchar(50) NULL,
    updated_at DATETIME NOT NULL,
    operation varchar(20) NOT NULL
)

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Client')
CREATE TABLE Client ( ID int not null IDENTITY(1,1), Prefix varchar(10), Last_Name varchar(50),
First_Name varchar(50), Middle_initial varchar(1), Permit_Num varchar(10), Active bit, Holiday_Card bit, Community_Breakfast bit, Notes varchar(250),
CONSTRAINT PK_Client PRIMARY KEY ( ID ))

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Address')
CREATE TABLE Address ( Client_ID int, Line1 varchar(35), Line2 varchar(35), City varchar(25), State char(2), Zip char(5), 
CONSTRAINT PK_Address PRIMARY KEY ( Client_ID ), 
CONSTRAINT FK_Address_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Phone')
CREATE TABLE Phone ( Client_ID int, Type varchar(10), [Number] varchar(11), CONSTRAINT PK_Phone_TEST PRIMARY KEY ( Client_ID, [Type]),
CONSTRAINT FK_Phone_Client_TEST FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Email')
CREATE TABLE Email ( Client_ID int, Type varchar(10), [Email] varchar(30), CONSTRAINT PK_Email_TEST PRIMARY KEY ( Client_ID, [Type]), 
CONSTRAINT FK_Email_Client_TEST FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Organization')
CREATE TABLE Organization ( [Name] varchar(30), [Type] varchar(20), 
CONSTRAINT PK_Organization PRIMARY KEY ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Works_For')
CREATE TABLE Associated_With ( Client_ID int, Org_Name varchar(30), Org_Type varchar(20), Title varchar(20), [Primary] bit, 
CONSTRAINT PK_Associated_With PRIMARY KEY ( Client_ID, Org_Name, Org_Type ),
CONSTRAINT FK_Associated_With_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID),
CONSTRAINT FK_Associated_With_Organization FOREIGN KEY (Org_Name, Org_type) REFERENCES Organization ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Assistant')
CREATE TABLE Assistant ( Boss_ID int, First_Name varchar(50), Last_Name varchar(50), 
CONSTRAINT PK_Assists PRIMARY KEY ( Boss_ID ), 
CONSTRAINT FK_Assists_Boss_Client FOREIGN KEY (Boss_ID) REFERENCES Client (ID) )

GO

---creation of any triggers
-----------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.objects WHERE [name] = 'trgAccountAuditInsDel')
EXEC('CREATE TRIGGER trgAccountAuditInsDel
ON Account
AFTER INSERT, DELETE
AS
BEGIN
SET NOCOUNT ON;
INSERT INTO AccountAudits(
        User_Name, 
        User_Type,
        Failed_Login,
        office,
        updated_at, 
        operation
    )
    SELECT
        d.User_Name,
        User_Type,
        Failed_Login,
        office,
        GETDATE(),
        ''delete''
    FROM
        deleted d
    UNION ALL
	SELECT
        i.User_Name,
        User_Type,
        Failed_Login,
        office,
        GETDATE(),
        ''insert''
    FROM
        inserted i
END')

IF NOT EXISTS (SELECT * FROM sys.objects WHERE [name] = 'trgAccountAuditUpdate')
EXEC('CREATE TRIGGER trgAccountAuditUpdate
ON Account
AFTER UPDATE
AS
BEGIN
SET NOCOUNT ON;
INSERT INTO AccountAudits(
        User_Name, 
        User_Type,
        Failed_Login,
        office,
        updated_at, 
        operation
    )
    SELECT
        d.User_Name,
        User_Type,
        Failed_Login,
        office,
        GETDATE(),
        ''update-old''
    FROM
        deleted d
    UNION ALL
	SELECT
        i.User_Name,
        User_Type,
        Failed_Login,
        office,
        GETDATE(),
        ''update-new''
    FROM
        inserted i
END')

--creation of any views
-----------------------------------------------------------------------------------------------------------------------------
--creates a view that is used in the queryClientFull SP
USE [SUPdb]
IF OBJECT_ID('viewall', 'V') IS NOT NULL
DROP VIEW viewAll
GO

CREATE VIEW viewAll
AS
	SELECT ID, Prefix, Client.Last_Name, Client.First_Name, Middle_initial, Assistant.First_Name AS 'Assistant_First_Name', Assistant.Last_Name AS 'Assistant_Last_Name', Permit_Num, Active,
	Holiday_Card, Community_Breakfast, Notes, Line1, Line2, City, State, Zip, Org_Name, Org_Type, Title, [Primary] FROM Client 
		FULL JOIN [Address] ON ID = Address.Client_ID
		FULL JOIN Associated_With ON ID = Associated_With.Client_ID
		FULL JOIN Assistant ON ID = Assistant.Boss_ID
		WHERE [Primary] = 1
GO

IF OBJECT_ID('viewLess', 'V') IS NOT NULL
DROP VIEW viewLess
GO

CREATE VIEW viewLess
AS
	SELECT ID, Prefix, Client.Last_Name, Client.First_Name, Middle_initial, Assistant.First_Name AS 'Assistant_First_Name', Assistant.Last_Name AS 'Assistant_Last_Name', Permit_Num, Active,
	Holiday_Card, Community_Breakfast, Notes, Line1, Line2, City, State, Zip FROM Client 
		FULL JOIN [Address] ON ID = Address.Client_ID
		FULL JOIN Assistant ON ID = Assistant.Boss_ID
GO

--creation of any stored Procedures
-------------------------------------------------------------------------------------------------------------------------------


-- =============================================
-- Create date: 10/24/2019
-- Description:	validates log in information with hash and salt
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('validateLogin'))
   exec('CREATE PROCEDURE validateLogin AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE validateLogin

	-- Add the parameters for the stored procedure here
	@userName nvarchar(50), @givenPW varchar(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @dateTimeNow DATETIME
	DECLARE @dateTimeFailed DATETIME
	DECLARE @isLocked BIT = 0
	DECLARE @isValid BIT
	DECLARE @Salt VARCHAR(25)
	DECLARE @PwdWithSalt VARCHAR(125)
	DECLARE @PwdHash binary(64)
	DECLARE @hashPass binary(64)
	DECLARE @cnt INT = 0

	-- reset failed login if time since last attempt is >= 15 minutes 
	SET @dateTimeNow = GETDATE()
	SET @dateTimeFailed = (SELECT updated_at FROM AccountAudits WHERE User_Name = @userName AND ChangeID = (SELECT MAX(ChangeID) FROM AccountAudits WHERE User_Name = @userName) )
	IF (DATEDIFF(minute, @dateTimeFailed, @dateTimeNow) > 15) UPDATE Account SET Failed_login = 0 WHERE User_Name = @userName


	-- get salt and hashed password
	SELECT @Salt = Salt, @PwdHash = [Password] FROM Account WHERE User_Name = @userName

	-- apply salt to password parameter
	SET @PwdWithSalt = @Salt + @givenPW

	-- hash once
	SET @hashPass = HASHBYTES('SHA2_512', @PwdWithSalt)

	-- hash 500101 more times
	/*WHILE @cnt < '500101'
	BEGIN
		SET @hashPass = HASHBYTES('SHA2_512', @hashPass) 
		SET @cnt = @cnt + 1;
	END*/

	-- check for validity of password
	IF (@hashPass = @PwdHash) SET @isValid = 1
	ELSE SET @isValid = 0

	-- check for lockout and revoke validity if too many failed logins
	IF ((SELECT Failed_login FROM Account WHERE User_Name = @userName) > 5)
	BEGIN
		SET @isValid = 0
		SET @isLocked = 1
	END

	-- update failed logins
	IF @isValid = 0
	BEGIN
		IF ((SELECT Failed_login FROM Account WHERE User_Name = @userName) IS NOT NULL OR (SELECT Failed_login FROM Account WHERE User_Name = @userName) = 0) UPDATE Account SET Failed_Login = Failed_Login + 1 WHERE User_Name = @userName
		ELSE UPDATE Account SET Failed_Login = 1
	END
	ELSE UPDATE ACCOUNT SET Failed_Login = 0 WHERE User_Name = @userName

	-- create temp table to return to middleware
	CREATE TABLE #results (Valid_Login bit, Account_Locked bit, Failed_Attempts int)
	INSERT INTO #results (Valid_Login, Account_Locked, Failed_Attempts) VALUES(@isValid, @isLocked, (SELECT Failed_login FROM Account WHERE User_Name = @userName))
	SELECT * FROM #results

	-- drop temp table
	DROP TABLE #results

END

GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	Takes 3 variables and returns clients that begin with the given variables. Input variables are allowed to be nulled.
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('queryClientFull'))
   exec('CREATE PROCEDURE queryClientFull AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE queryClientFull
	-- Add the parameters for the stored procedure here
	@lastName varchar(50) = '', @firstName nvarchar(30) = ''

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @lastName IS NULL SET @lastName = ''
	IF @firstName IS NULL SET @firstName = ''


	CREATE TABLE #searchResults (ID int, Prefix varchar(10), Last_Name varchar(50), First_Name varchar(50), Middle_initial varchar(1), Assistant_First_Name varchar(50), Assisntant_Last_Name varchar(50), Permit_Num varchar(10), Active bit,
	Holiday_Card bit, Community_Breakfast bit, Notes varchar(250), Line1 varchar(35), Line2 varchar(35), City varchar(25), State varchar(2), Zip varChar(5))

	INSERT INTO #searchResults SELECT * FROM [viewLess]

	ALTER TABLE #searchResults ADD Personal_Email varchar(30), Business_Email varchar(30), Assistant_Email varchar(30), Personal_Phone varchar(11), Business_Phone varchar(11), Assistant_Phone varchar(30)

	UPDATE #searchResults SET Personal_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'assistant')
	UPDATE #searchResults SET Personal_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'assistant')

	SELECT ID, Prefix, Last_Name, First_Name, Middle_initial, Permit_Num, Assistant_First_Name, Assisntant_Last_Name, Active, Holiday_Card, Community_Breakfast, Notes, ID AS 'Client_ID', Line1, Line2, City, State, Zip, ID AS 'Client_ID', 
		ID AS 'Client_ID', Personal_Email, Business_Email, Assistant_Email, ID AS 'Client_ID', Personal_Phone, Business_Phone, Assistant_Phone FROM #searchResults
	WHERE First_Name LIKE (@firstName + '%') 
		AND Last_Name LIKE (@lastName + '%') 
	ORDER BY Last_Name, First_Name, Middle_initial

	DROP TABLE #searchResults

END

GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	adds a client into the client table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('addClient'))
   exec('CREATE PROCEDURE addClient AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE addClient

	-- Add the parameters for the stored procedure here
	@prefix varchar(10) = '', @firstName varchar(50),
	@lastName varchar(50), @middleInitial varchar(1) = '',
	@permitNum varchar(50) = '',
	@active bit = 1, @holidayCard bit = 0,
	@communityBreakfast bit = 0,  @notes varchar(250) = '',
	/*@orgName varchar(30), @orgType varchar(20),
	@title varchar(20) = '',*/ @Personal_phoneNumber varchar(11) = '',
	@Business_phoneNumber varchar(11) = '', @Personal_Email varchar(30) = '',
	@Business_Email varchar(30) = '', @Assistant_Email varchar(30) = '',
	@Assistant_phoneNumber varchar(11) = '', @line1 varchar(35) = '',
	@line2 varchar(35) = '', @city varchar(25) = '',
	@state varchar(2) = '', @zipCode varchar(5) = '',
	@assistantFirstName varchar(50) = '', @assistantLastName varchar(50) = ''
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
    IF @Business_Email IS NULL SET @Business_Email = ''
	IF @Assistant_Email IS NULL SET @Assistant_Email = ''
	IF @Personal_Email IS NULL SET @Personal_Email = ''
	IF @Business_phoneNumber IS NULL SET @Business_Email = ''
	IF @Assistant_phoneNumber IS NULL SET @Assistant_phoneNumber = ''
	IF @Personal_phoneNumber IS NULL SET @Personal_phoneNumber = ''
	IF @middleInitial IS NULL SET @middleInitial = ''
	IF @permitNum IS NULL SET @permitNum = ''
	IF @notes IS NULL SET @notes = ''
	/*IF @orgName IS NULL SET @orgName = ''
	IF @orgType IS NULL SET @orgType = ''
	IF @title IS NULL SET @title = ''*/
	IF @line1 IS NULL SET @line1 = ''
	IF @line2 IS NULL SET @line2 = ''
	IF @state IS NULL SET @state = ''
	IF @zipCode IS NULL SET @zipCode = ''
	IF @assistantFirstName IS NULL SET @assistantFirstName = ''
	IF @assistantLastName IS NULL SET @assistantLastName = ''
    
	INSERT INTO Client (Prefix, First_Name, Last_Name, Middle_initial, Permit_Num, Active, Holiday_Card, Community_Breakfast, Notes) VALUES (@prefix, @firstName, @lastName, @middleInitial, @permitNum, @active, @holidayCard, @communityBreakfast, @notes)
	
	-- declare an int and set its value based on the auto generated ID from inserting into the client table in the previous line
	DECLARE @ID int
	SET @ID = SCOPE_IDENTITY()

	-- set values into the tables. dont repeat adding to organization table in the case that the organization and type already exist in the database
	/*IF (SELECT COUNT(*) FROM Organization WHERE Name = @orgName AND Type = @orgType) = 0 INSERT INTO Organization(Name, Type) VALUES(@orgName, @orgType)
	INSERT INTO Associated_With(Client_ID, Org_Name, Org_Type, Title, [Primary]) VALUES (@ID, @orgName, @orgType, @title, 1)*/
	INSERT INTO Address(Client_ID, Line1, Line2, City, State, Zip) VALUES(@ID, @line1, @line2, @city, @state, @zipCode)

	INSERT INTO Phone(Client_ID, Type, Number) VALUES (@ID, 'business', @Business_phoneNumber)
	INSERT INTO Phone(Client_ID, Type, Number) VALUES (@ID, 'personal', @Personal_phoneNumber)
	INSERT INTO Phone(Client_ID, Type, Number) VALUES (@ID, 'assistant', @Assistant_phoneNumber)

	INSERT INTO Email(Client_ID, Type, Email) VALUES (@ID, 'business', @Business_Email)
	INSERT INTO Email(Client_ID, Type, Email) VALUES (@ID, 'personal', @Personal_Email)
	INSERT INTO Email(Client_ID, Type, Email) VALUES (@ID, 'assistant', @Assistant_Email)

	INSERT INTO Assistant(Boss_ID, First_Name, Last_Name) VALUES (@ID, @assistantFirstName, @assistantLastName)

	RETURN @ID

END

GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	checks for a near match and sends the match if difference is >=3. Also reports the client where the difference function is >=3
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('checkForNearMatch'))
   exec('CREATE PROCEDURE checkForNearMatch AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE checkForNearMatch

	-- Add the parameters for the stored procedure here
	@firstName varchar(50) = null, @lastName varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	SELECT ID, First_Name, Last_Name FROM Client WHERE DIFFERENCE(@firstName, First_Name) > 3 AND DIFFERENCE(@lastName, Last_Name) > 3

END

GO

-- =============================================
-- Create date: 10/10/2019
-- Description:	Adds a user to the Account table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('addAccount'))
   exec('CREATE PROCEDURE addAccount AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE addAccount
	-- Add the parameters for the stored procedure here
	@userName varchar(25), @password varchar(64),
	@userType char(1) = null, @office varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	DECLARE @Salt VARCHAR(25)
	DECLARE @cnt INT = 0
	DECLARE @PwdWithSalt VARCHAR(125)
	DECLARE @seed int
	DECLARE @count tinyint
	DECLARE @currentTime DATETIME
	DECLARE @hashedPass binary(64)

	-- build salt w/ seed
	SET @currentTime = GETDATE()
	SET @seed = (DATEPART(hh, @currentTime) * 10000000) + (DATEPART(n, @currentTime) * 100000) + (DATEPART(s, @currentTime) * 1000) + DATEPART(ms, @currentTime)
	SET @count = 1
	SET @salt = CHAR(ROUND((RAND(@seed) * 90) + 12, 3))

	-- build salt to 25 random characters
	WHILE (@count < 25)
	BEGIN
		SET @Salt = @Salt + CHAR(ROUND((RAND() * 90) + 12, 3))
		SET @count = @count + 1
	END

	-- combine salt with password
	SET @PwdWithSalt = @Salt + @password

	-- initial hash
	SET @hashedPass = HASHBYTES('SHA2_512', @PwdWithSalt)

	-- hash 500101 more times
	/*WHILE @cnt < '500101'
	BEGIN
		SET @hashedPass = HASHBYTES('SHA2_512', @hashedPass) 
		SET @cnt = @cnt + 1;
	END*/
	
	--insert values in Account table
	INSERT INTO Account (User_Name, Salt, Password, User_Type, Office) VALUES (@userName, @Salt, @hashedPass, @userType, @office)

END

GO

-- =============================================
-- Create date: 11/11/2019
-- Description:	Deletes a user to the Account table
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('deleteAccount'))
   exec('CREATE PROCEDURE deleteAccount AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE deleteAccount

	@user_name varchar(25)

AS
BEGIN

	DELETE from Account Where [User_Name] = @user_name

END

GO

-- =============================================
-- Create date: 10/25/2019
-- Description:	updates tables based on parameters given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('updateClient'))
   exec('CREATE PROCEDURE updateClient AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE updateClient
	-- Add the parameters for the stored procedure here
	@ID int, @prefix varchar(10) = null, @firstName varchar(50) = null,
	@lastName varchar(50) = null, @middleInitial varchar(1) = null,
	@permitNum varchar(50) = null,
	@active bit = null, 
	@holidayCard bit = 0,
	@communityBreakfast bit = 0,
	----------------------------------------------------------------------------------  
	@notes varchar(250) = null,
	/*@orgName varchar(30) = null, @orgType varchar(20) = null,
	@title varchar(20) = null,*/ @Personal_phoneNumber varchar(11) = null,
	@Business_phoneNumber varchar(11) = null, @Personal_Email varchar(30) = null,
	@Business_Email varchar(30) = null, @Assistant_Email varchar(30) = null,
	@Assistant_phoneNumber varchar(11) = null, @line1 varchar(35) = null,
	@line2 varchar(35) = null, @city varchar(25) = null,
	@state varchar(2) = null, @zipCode varchar(5) = null,
	@assistantFirstName varchar(50) = null, @assistantLastName varchar(50) = null

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- update values in the tables.
	IF @prefix IS NOT NULL
		UPDATE Client SET Prefix = @prefix WHERE ID = @ID
	IF @firstName IS NOT NULL 
		UPDATE Client SET First_Name = @firstName WHERE ID = @ID
	IF @lastName IS NOT NULL 
		UPDATE Client SET Last_Name = @lastName WHERE ID = @ID
	IF @middleInitial IS NOT NULL 
		UPDATE Client SET Middle_initial = @middleInitial WHERE ID = @ID
	IF @permitNum IS NOT NULL 
		UPDATE Client SET Permit_Num = @permitNum WHERE ID = @ID
	IF @active IS NOT NULL 
		UPDATE Client SET Active = @active WHERE ID = @ID
	IF @holidayCard IS NOT NULL 
		UPDATE Client SET Holiday_Card = @holidayCard WHERE ID = @ID
	IF @communityBreakfast IS NOT NULL 
		UPDATE Client SET Community_Breakfast = @communityBreakfast WHERE ID = @ID
	------------------------------------------------------------------------------------------
	IF @notes IS NOT NULL 
		UPDATE Client SET Notes = @notes WHERE ID = @ID
	
	
	-- \/ this is done in updateOrganization now  \/
	/*IF (SELECT COUNT(*) FROM Organization WHERE [Name] = @orgName AND [Type] = @orgType) = 0 AND (@orgName IS NOT NULL OR @orgType IS NOT NULL )
		INSERT INTO Organization([Name], [Type]) VALUES(@orgName, @orgType)
	IF @orgName IS NOT NULL OR @orgType IS NOT NULL 
		UPDATE Organization SET [Name] = @orgName, [Type] = @orgType 
			WHERE [Name] = @orgName AND [Type] = @orgType
	IF @title IS NOT NULL 
		UPDATE Works_For SET Title = @title 
			WHERE Client_ID = @ID AND Org_Name = @orgName AND Org_Type = @orgType*/


	--------------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM Phone WHERE Client_ID = @ID AND [Type] = 'business') = 0 AND @Business_phoneNumber IS NOT NULL 
		INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'business', @Business_phoneNumber)
	IF @Business_phoneNumber IS NOT NULL 
		UPDATE Phone SET Number = @Business_phoneNumber 
			WHERE Client_ID = @ID AND [Type] = 'business'

	IF (SELECT COUNT(*) FROM Phone WHERE Client_ID = @ID AND [Type] = 'personal') = 0 AND @Personal_phoneNumber IS NOT NULL 
		INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'personal', @Personal_phoneNumber)
	IF @Personal_phoneNumber IS NOT NULL 
		UPDATE Phone SET Number = @Personal_phoneNumber 
			WHERE Client_ID = @ID AND [Type] = 'personal'
	--
	IF (SELECT COUNT(*) FROM Email WHERE Client_ID = @ID AND [Type] = 'business') = 0 AND @Business_email IS NOT NULL 
		INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'business', @Business_email)
	IF @Business_email IS NOT NULL 
		UPDATE Email SET Email = @Business_email 
			WHERE Client_ID = @ID AND [Type] = 'business'

	IF (SELECT COUNT(*) FROM Email WHERE Client_ID = @ID AND [Type] = 'personal') = 0 AND @Personal_email IS NOT NULL 
		INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'personal', @Personal_email)
	IF @Personal_email IS NOT NULL 
		UPDATE Email SET Email = @Personal_email 
			WHERE Client_ID = @ID AND [Type] = 'personal'
	
	---------------------------------------------------------------------------------------------
	--
	IF (SELECT COUNT(*) FROM [Address] WHERE Client_ID = @ID) = 0 AND (@line1 IS NOT NULL OR @line2 IS NOT NULL OR @city IS NOT NULL OR @state IS NOT NULL OR @zipCode IS NOT NULL )
		INSERT INTO Address(Client_ID, Line1, Line2, City, [State], Zip) VALUES(@ID, @line1, @line2, @city, @state, @zipCode)
	IF @line1 IS NOT NULL OR @line2 IS NOT NULL OR @city IS NOT NULL OR @state IS NOT NULL OR @zipCode IS NOT NULL 
		UPDATE [Address] SET Line1 = @line1, Line2 = @line2, City = @city, [State] = @state, Zip = @zipCode
			WHERE Client_ID = @ID 
	
	---------------------------------------------------------------------------------------------

	IF ((SELECT COUNT(*) FROM Assistant WHERE Boss_ID = @ID) = 0) AND (@assistantFirstName IS NOT NULL OR @assistantLastName IS NOT NULL OR @Assistant_Email IS NOT NULL OR @Assistant_phoneNumber IS NOT NULL)
		Begin	INSERT INTO Assistant(Boss_ID, First_Name, Last_Name) VALUES(@ID, @assistantFirstName, @assistantLastName) 
				INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'assistant', @Assistant_phoneNumber)
				INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'assistant', @Assistant_Email)
		END
	IF (@assistantFirstName IS NOT NULL OR @assistantLastName IS NOT NULL OR @Assistant_Email IS NOT NULL OR @Assistant_phoneNumber IS NOT NULL)
		Begin	UPDATE Assistant SET First_Name = @assistantFirstName, Last_Name = @assistantLastName 
					WHERE Boss_ID = @ID
				UPDATE Phone SET Number = @Assistant_phoneNumber 
					WHERE Client_ID = @ID AND [Type] = 'assistant'
				UPDATE Email SET Email = @Assistant_Email 
					WHERE Client_ID = @ID AND [Type] = 'assistant'
		END

	return @ID

END

GO
-- =============================================
-- Create date: 11/25/2019
-- Description:	updates Organization and Associated_With tables based on parameters given
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('updateOrganization'))
   exec('CREATE PROCEDURE updateOrganization AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE updateOrganization

	@id int,
	@orgName varchar(30) = null, @orgType varchar(20) = null,
	@title varchar(20) = null, @primary bit = null

AS
BEGIN

	IF (SELECT COUNT(*) FROM Organization WHERE [Name] = @orgName AND [Type] = @orgType) = 0 AND (@orgName IS NOT NULL OR @orgType IS NOT NULL )
		INSERT INTO Organization([Name], [Type]) VALUES(@orgName, @orgType)
	IF @title IS NOT NULL 
		UPDATE Associated_With SET Title = @title 
			WHERE Client_ID = @ID AND Org_Name = @orgName AND Org_Type = @orgType

	IF @primary IS NOT NULL 
	BEGIN
		UPDATE Associated_With SET [Primary] = 0 
			WHERE Client_ID = @ID AND [Primary] = 1

		UPDATE Associated_With SET [Primary] = 1 
			WHERE Client_ID = @ID AND Org_Name = @orgName AND Org_Type = @orgType

	END

    return @ID
    
END

GO

-- =============================================
-- Create date: 10/12/2019
-- Description:	Returns all data for a single client by searching for the ID
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('getClientByIdFull'))
   exec('CREATE PROCEDURE getClientByIdFull AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE getClientByIdFull
	-- Add the parameters for the stored procedure here
    @Client_Id int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here

	
	CREATE TABLE #searchResults (ID int, Prefix varchar(10), Last_Name varchar(50), First_Name varchar(50), Middle_initial varchar(1), Assistant_First_Name varchar(50), Assisntant_Last_Name varchar(50), Permit_Num varchar(10),
	Active bit, Holiday_Card bit, Community_Breakfast bit, Notes varchar(250), Line1 varchar(35), Line2 varchar(35), City varchar(25), State varchar(2), Zip varChar(5))

	INSERT INTO #searchResults SELECT * FROM [viewLess]

	ALTER TABLE #searchResults ADD Personal_Email varchar(30), Business_Email varchar(30), Assistant_Email varchar(30), Personal_Phone varchar(11), Business_Phone varchar(11), Assistant_Phone varchar(30)

	UPDATE #searchResults SET Personal_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'assistant')
	UPDATE #searchResults SET Personal_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'assistant')

	SELECT ID, Prefix, Last_Name, First_Name, Middle_initial, Permit_Num, Assistant_First_Name, Assisntant_Last_Name, Active, Holiday_Card, Community_Breakfast, Notes, ID AS 'Client_ID', Line1, Line2, City, State, Zip, 
		ID AS 'Client_ID', Personal_Email, Business_Email, Assistant_Email, ID AS 'Client_ID', Personal_Phone, Business_Phone, Assistant_Phone FROM #searchResults
	WHERE ID = @Client_Id

	DROP TABLE #searchResults

END

GO
/****** Object:  StoredProcedure [dbo].[deleteClient]    Script Date: 11/6/2019 7:21:08 PM ******/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('deleteClient'))
   exec('CREATE PROCEDURE deleteClient AS BEGIN SET NOCOUNT ON END')
GO

ALTER PROCEDURE deleteClient

	@ID int

AS
BEGIN

	DECLARE @org_name varchar(30) = null
	DECLARE @org_type varchar(30) = null

	--create temp table
	CREATE TABLE #temp (org_name varchar(30), org_type varchar(30))
	--populate temp table
	INSERT INTO #temp SELECT Org_Name, Org_Type FROM Associated_With WHERE Client_ID = @ID
	--delete values where client ID matches
	DELETE FROM Associated_With WHERE Client_ID = @ID

	-- check if they are in Associated_With
	/*if (SELECT COUNT(*) from Associated_With Where Client_ID = @ID) = 1
	BEGIN
		-- store Org_Name for later use
		SET @org_name = (SELECT Org_Name From Associated_With Where Client_ID = @ID)
		-- store Org_Type for later use
		SET @org_type = (SELECT Org_Type From Associated_With Where Client_ID = @ID)
		DELETE from Associated_With Where Client_ID = @ID
	END*/
	

	DELETE from [Address] Where Client_ID = @ID

	DELETE from Assistant Where Boss_ID = @ID

	DELETE from Email Where Client_ID = @ID

	DELETE from Phone Where Client_ID = @ID

	DELETE from Client Where ID = @ID

	-- if no other client work for that orginization delete it
	/*if (SELECT COUNT(*) from Associated_With Where Org_Name = @org_name AND Org_Type = @org_type) = 0
		DELETE from Organization Where [Name] = @org_name AND [Type] = @org_type*/

	--this should remove all organizations where name and type match with values in the temp table
	WHILE ((SELECT Count(*) FROM #temp) != 0)
	BEGIN
		SET @org_name = (SELECT TOP 1 org_name FROM #temp)
		SET @org_type = (SELECT TOP 1 org_type FROM #temp)
		IF (SELECT COUNT(*) from Associated_With Where Org_Name = @org_name AND Org_Type = @org_type) = 0
			DELETE FROM Organization WHERE [Name] = @org_name AND [Type] = @org_type
		DELETE FROM #temp WHERE org_name = @org_name AND org_type = @org_type
	END
	DROP TABLE #temp
END

GO

-- =============================================
-- Create date: 11/22/2019
-- Description:	queries for organizations of a given ID
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('queryOrganization'))
   exec('CREATE PROCEDURE queryOrganization AS BEGIN SET NOCOUNT ON END')
GO

ALTER PROCEDURE queryOrganization
	@ID int

AS
BEGIN

	SELECT * FROM Associated_With WHERE Client_ID = @ID

END

GO

/****** Object:  StoredProcedure [dbo].[addOrganization]    Script Date: 11/22/2019 9:42:15 AM ******/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('addOrganization'))
   exec('CREATE PROCEDURE addOrganization AS BEGIN SET NOCOUNT ON END')
GO

ALTER PROCEDURE addOrganization
	@clientID int, @orgName varchar(30),
	@orgType varchar(20), @title varchar(20) = '',
	@primary bit

AS
BEGIN

	IF (@primary = 1) UPDATE Associated_With SET [Primary] = 0 WHERE Client_ID = @clientID
	IF (SELECT COUNT(*) FROM Organization WHERE Name = @orgName AND Type = @orgType) = 0 INSERT INTO Organization(Name, Type) VALUES(@orgName, @orgType)
	INSERT INTO Associated_With(Client_ID, Org_Name, Org_Type, Title, [Primary]) VALUES (@clientID, @orgName, @orgType, @title, @primary)

END

GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('deleteOrganization'))
   exec('CREATE PROCEDURE deleteOrganization AS BEGIN SET NOCOUNT ON END')
GO

ALTER PROCEDURE deleteOrganization

	@ID int, @org_name varchar(30),
	@org_type varchar(30)

AS
BEGIN

	DELETE FROM Associated_With WHERE Client_ID = @ID AND Org_Name = @org_name AND Org_Type = @org_type

	IF (SELECT COUNT(*) from Associated_With Where Org_Name = @org_name AND Org_Type = @org_type) = 0
		DELETE FROM Organization WHERE [Name] = @org_name AND [Type] = @org_type

END

GO



-- =============================================
-- Create date: 11/1/2019
-- Description: adds dummy data
-- =============================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('addDummyData'))
   exec('CREATE PROCEDURE addDummyData AS BEGIN SET NOCOUNT ON END')
GO
ALTER PROCEDURE addDummyData
	-- Add the parameters for the stored procedure here

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
DECLARE @ID int

EXEC	@ID = addCLient
		@Prefix = 'Mr.',
		@firstName = N'Matt',
		@lastName = N'Holcomb',
		@middleInitial = N'J',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@notes = N'VIP',
		@Personal_phoneNumber = N'1234564132',
		@Business_phoneNumber = N'2132165466',
		@Personal_Email = N'email@server.com',
		@Business_Email = 'businessEmail@server.com',
		@line1 = N'123 ThatStreet',
		@line2 = N'apt 102',
		@city = N'superior',
		@state = N'WI',
		@zipCode = N'54880',
		@Assistant_phoneNumber = '123456779',
		@Assistant_Email = 'assistantEmail@server.com',
		@assistantFirstName = 'Billy',
		@assistantLastName = 'Joe'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = 'Foresty Dept',
		@orgType = 'Government',
		@title = 'park worker',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = 'Hayward',
		@orgType = 'High School',
		@title = 'teacher',
		@primary = 0

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Hayward High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Jim',
		@lastName = N'Holcomb',
		@communityBreakfast = 1,
		@holidayCard = 0,
		@notes = N'notes and such',
		@Business_phoneNumber = N'1231475646',
		@Personal_Email = N'thatOneGuy@server.com',
		@line1 = N'149 Cranberry Lane',
		@line2 = N'apt 508',
		@city = N'superior',
		@state = N'WI',
		@zipCode = N'54880'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'FBI',
		@orgType = N'Government',
		@title = N'lead banker',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Alen',
		@lastName = N'Johnson',
		@middleInitial = N'Z',
		@permitNum = N'Z699',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@notes = N'notes and other stuff',
		@Business_phoneNumber = N'1231321459',
		@Personal_Email = N'thatOneGuy@server.com',
		@line1 = N'149 Dillingham Road',
		@city = N'Duluth',
		@state = N'MN',
		@zipCode = N'14285'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'UW-Superior',
		@orgType = N'Higher Education',
		@title = N'Professor',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'UW-Superior',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Jimmy',
		@lastName = N'John',
		@middleInitial = N'U',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@notes = N'things and such',
		@Personal_phoneNumber = N'1121588745',
		@Personal_Email = N'MyAwsomeEmail@server.com',
		@line1 = N'1258 West King Road',
		@city = N'Canada',
		@state = N'MN',
		@zipCode = N'14458'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'FBI',
		@orgType = N'Government',
		@title = N'Inspector General',
		@primary = 1

EXEC	@ID = addCLient
		@prefix = 'Miss',
		@firstName = N'Timmy',
		@lastName = N'Stark',
		@communityBreakfast = 1,
		@holidayCard = 0,
		@Personal_phoneNumber = N'5463151654',
		@Business_phoneNumber = N'5454651654',
		@Business_Email = N'BarbieGirl@server.com',
		@line1 = N'1894 WestBrook drive',
		@city = N'Lakeshore',
		@state = N'TX',
		@zipCode = N'97841'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Microsoft',
		@orgType = N'Non-profit',
		@title = N'Grunt',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Larson',
		@lastName = N'Kitty',
		@middleInitial = N'C',
		@permitNum = N'H123',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@Business_phoneNumber = N'6573541245',
		@Personal_Email = N'KingSlayer@server.com',
		@line1 = N'18456 Darkshore road',
		@city = N'Los Angeles',
		@state = N'CA',
		@zipCode = N'91458'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Sears',
		@orgType = N'Non-profit',
		@title = N'Worker of somekind',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Timmmy',
		@lastName = N'Slim',
		@middleInitial = N'Y',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@Business_phoneNumber = N'0123948547',
		@Personal_Email = N'ForTheHorde@server.com',
		@Personal_phoneNumber = N'2314564654',
		@Business_Email = N'ForTheAlliance@server.com',
		@line1 = N'14578 Nameless street',
		@city = N'Superior',
		@state = N'CA',
		@zipCode = N'41547'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Org.net',
		@orgType = N'Non-profit',
		@title = N'Head Of Sales',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Izuku',
		@lastName = N'Midoria',
		@middleInitial = N'V',
		@permitNum = N'P000',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Personal_phoneNumber = N'4724561324',
		@Business_Email = N'AllmightFanboy@server.com',
		@line1 = N'18525 Noname road',
		@city = N'Cityname',
		@state = N'WA',
		@zipCode = N'64564'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'UA',
		@orgType = N'Non-profit',
		@title = N'Hero',
		@primary = 1

EXEC	@ID = addCLient
		@Prefix = 'Lt Coln.',
		@firstName = N'John',
		@lastName = N'Johnson',
		@middleInitial = N'Q',
		@Business_phoneNumber = N'5643617845',
		@Personal_Email = N'ILikeToWin@server.com',
		@line1 = N'454 Streetname road',
		@city = N'ThisPlace',
		@state = N'KS',
		@zipCode = N'54654'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'PlaceTheyWorkFor',
		@orgType = N'Non-profit',
		@title = N'TitleTheyEarned',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Johnson',
		@lastName = N'Johnnyboy',
		@middleInitial = N'O',
		@Personal_phoneNumber = N'6543123216',
		@Business_Email = N'IDontLikePie@server.com',
		@line1 = N'4546 Slingshot road',
		@city = N'Niles',
		@state = N'MI',
		@zipCode = N'79873'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Principal''s Office',
		@orgType = N'High School',
		@title = N'Cheif Executive Officer',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Senate',
		@orgType = N'Elected Official',
		@title = N'Government official',
		@primary = 0

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'A High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Bo',
		@lastName = N'Jangles',
		@middleInitial = N'X',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Personal_phoneNumber = N'5442135646',
		@Business_Email = N'IDontLikePi@server.com',
		@line1 = N'4546 Orange road',
		@city = N'Spoontown',
		@state = N'WI',
		@zipCode = N'64461'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'UW-Superior',
		@orgType = N'Board of Regent',
		@primary = 1

EXEC	@ID = addCLient
		@Prefix = 'Mr.',
		@firstName = N'Apple',
		@lastName = N'Orange',
		@permitNum = N'W432',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Business_phoneNumber = N'7463215645',
		@Personal_Email = N'single@server.com',
		@line1 = N'1 Springbrook dr.',
		@city = N'Place',
		@state = N'WI',
		@zipCode = N'46489'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Superior DMV',
		@orgType = N'Government',
		@primary = 1

EXEC	@ID = addCLient
		@Prefix = 'Private',
		@firstName = N'Airbourne',
		@lastName = N'Ranger',
		@middleInitial = N'P',
		@communityBreakfast = 1,
		@holidayCard = 0,
		@notes = N'Very cool person',
		@Personal_phoneNumber = N'1691584511',
		@Personal_Email = N'coolGuy@server.com',
		@line1 = N'123 Awsome Stree',
		@city = N'superior',
		@state = N'WI',
		@zipCode = N'54880'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Army',
		@orgType = N'Business',
		@title = N'BA',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'TickleMe',
		@lastName = N'Elmo',
		@middleInitial = N'Y',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Business_phoneNumber = N'1234561846',
		@Business_Email = N'tickleMeElmo@server.com',
		@line1 = N'895 Sesame Street',
		@city = N'Milkwaukee',
		@state = N'TN',
		@zipCode = N'78445'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Sesame Street',
		@orgType = N'Elected Official',
		@title = N'Tickleree',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Winner',
		@orgType = N'Other',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Cloud',
		@lastName = N'Strife',
		@middleInitial = N'J',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@notes = N'Winner',
		@Business_phoneNumber = N'7695851425',
		@Personal_Email = N'cloudStife@server.com',
		@line1 = N'855 Anywhere Dr.',
		@city = N'Anywhere',
		@state = N'WA',
		@zipCode = N'58945'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'SOLDIER',
		@orgType = N'High School',
		@title = N'soldier',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'A High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Peter',
		@lastName = N'Griffin',
		@middleInitial = N'J',
		@notes = N'Cool guy',
		@Personal_phoneNumber = N'7395811448',
		@Personal_Email = N'birdIsTheWord@server.com',
		@line1 = N'31 Spooner Street',
		@city = N'Quahog',
		@state = N'RI',
		@zipCode = N'45589',
		@Assistant_phoneNumber = '561654684',
		@Assistant_Email = 'assistantEmail2020@server.com',
		@assistantFirstName = 'Meg',
		@assistantLastName = 'Griffin'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Pawtucket Brewery',
		@orgType = N'High School',
		@title = N'line man',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'A High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Louis',
		@lastName = N'Griffin',
		@middleInitial = N'E',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@notes = N'Wifey',
		@Personal_phoneNumber = N'6982341584',
		@Personal_Email = N'birdIsTheWord2@server.com',
		@line1 = N'31 Spooner Street',
		@city = N'Quahog',
		@state = N'RI',
		@zipCode = N'45589'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'StayAtHome',
		@orgType = N'Foundation',
		@title = N'MOM',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Stewie',
		@lastName = N'Griffin',
		@middleInitial = N'Z',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@notes = N'very smart',
		@Business_phoneNumber = N'1253651452',
		@Business_Email = N'birdIsTheWord3@server.com',
		@line1 = N'31 Spooner Street',
		@city = N'Quahog',
		@state = N'RI',
		@zipCode = N'45589',
		@Assistant_phoneNumber = '151564548',
		@Assistant_Email = 'assistantEmail2012@server.com',
		@assistantFirstName = 'Yarez',
		@assistantLastName = 'Rain'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'TS Goverment Facility',
		@orgType = N'Elementry',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'That Elementry School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Stew',
		@lastName = N'Griffin',
		@middleInitial = N'E',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Personal_phoneNumber = N'9872131321',
		@Personal_Email = N'birdIsTheWord4@server.com',
		@line1 = N'31 Spooner Street',
		@city = N'Quahog',
		@state = N'RI',
		@zipCode = N'45589'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'TS Goverment Facility',
		@orgType = N'Elementry',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'An Elementry School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Sally',
		@lastName = N'Sue',
		@middleInitial = N'I',
		@Personal_phoneNumber = N'6455645648',
		@Personal_Email = N'mai1_1231@server.com',
		@line1 = N'5646 Farangton Rd.',
		@city = N'ThisCity',
		@state = N'OH',
		@zipCode = N'56465'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'LocalCompany',
		@orgType = N'Business',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Sally',
		@lastName = N'Stone',
		@Personal_phoneNumber = N'9876581544',
		@Personal_Email = N'mail_6546@server.com'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Hayward',
		@orgType = N'High School',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Hayward High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Xion',
		@lastName = N'Angler',
		@middleInitial = N'E',
		@communityBreakfast = 1,
		@holidayCard = 1,
		@Business_phoneNumber = N'7853541654',
		@Personal_Email = N'mail_123@server.com',
		@line1 = N'1211 Elementy Road',
		@city = N'Ontario',
		@state = N'OH',
		@zipCode = N'45614'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'LocalBusiness2',
		@orgType = N'Business',
		@primary = 1

EXEC	@ID = addCLient
		@firstName = N'Steven',
		@lastName = N'Stone',
		@middleInitial = N'Y',
		@Personal_phoneNumber = N'5641211312',
		@Personal_Email = N'mailbox@server.com'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Spoontown',
		@orgType = N'High School',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Spoontown High School',
		@orgType = N'Education - All',
		@primary = 0

EXEC	@ID = addCLient
		@firstName = N'Steven',
		@lastName = N'Stoney',
		@middleInitial = N'Q',
		@communityBreakfast = 0,
		@holidayCard = 1,
		@Business_phoneNumber = N'4841215466',
		@Business_Email = N'FRIDAY@server.com',
		@line1 = N'124 Spring Street',
		@city = N'Sincinaty',
		@state = N'WA',
		@zipCode = N'54656',
		@Assistant_phoneNumber = '2451245121',
		@Assistant_Email = 'assistantEmail95@server.com',
		@assistantFirstName = 'Jim',
		@assistantLastName = 'Bob'

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Superior',
		@orgType = N'High School',
		@primary = 1

EXEC	addOrganization
		@clientID = @ID,
		@orgName = N'Superior High School',
		@orgType = N'Education - All',
		@primary = 0



UPDATE Client SET Active = 0 WHERE Last_Name = 'Stoney'

UPDATE Client SET Active = 0 WHERE First_Name = 'Xion'

UPDATE Client SET Active = 0 WHERE First_Name = 'Stew'

UPDATE Client SET Active = 0 WHERE First_Name = 'Airbourne'

UPDATE Client SET Active = 0 WHERE First_Name = 'Matt'

UPDATE Client SET Active = 0 WHERE First_Name = 'Bo'

UPDATE Client SET Active = 0 WHERE First_Name = 'Sally'

END

GO

EXEC	@return_value = addAccount
		@userName = N'admin',
		@password = N'password',
		@userType = N'A',
		@office = NULL
		
GO
