USE [master]
GO

/*Create database*/
IF NOT EXISTS (SELECT * FROM master.dbo.sysdatabases WHERE '[' + name + ']' = 'SUPdb' OR name = 'SUPdb')
   exec('CREATE DATABASE [SUPdb] CONTAINMENT = NONE')
GO

/* create User If possible */
USE [master];

--CREATE LOGIN teamRADGSHAUser
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'SUPuser')
   exec('CREATE LOGIN SUPuser WITH PASSWORD = ''abc123'';')
GO

USE [SUPdb]

--create user
IF USER_ID('SUPuser') IS NULL exec('CREATE USER [SUPuser] FOR LOGIN [SUPuser]')
GO

--update roles
GRANT EXECUTE TO SUPuser
GO

--create tables
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Account')
CREATE TABLE Account ( [User_Name] varchar(25), [Password] varchar(64), User_Type char, Failed_Login int, Office varchar(50), 
CONSTRAINT PK_Staff PRIMARY KEY ([User_Name]) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Client')
CREATE TABLE Client ( ID int not null IDENTITY(1,1) PRIMARY KEY, Prefix varchar(10), Last_Name varchar(50), First_Name varchar(50), Middle_initial char, Permit_Num varchar(10), Active bit, Notes varchar(30))

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Address')
CREATE TABLE Address ( Client_ID int, Line1 varchar(35), Line2 varchar(35), City varchar(25), State char(2), Zip char(5), 
CONSTRAINT PK_Address PRIMARY KEY ( Client_ID ), 
CONSTRAINT FK_Address_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Phone')
CREATE TABLE Phone ( Client_ID int, Type varchar(10), [Number] varchar(11), CONSTRAINT PK_Phone_TEST PRIMARY KEY ( Client_ID, [Type]),
CONSTRAINT FK_Phone_Client_TEST FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Email')
CREATE TABLE Email ( Client_ID int, Type varchar(10), [Email] varchar(30), CONSTRAINT PK_Email_TEST PRIMARY KEY ( Client_ID, [Type]), 
CONSTRAINT FK_Email_Client_TEST FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Organization')
CREATE TABLE Organization ( [Name] varchar(30), [Type] varchar(20), 
CONSTRAINT PK_Organization PRIMARY KEY ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Works_For')
CREATE TABLE Works_For ( Client_ID int, Org_Name varchar(30), Org_Type varchar(20), Title varchar(20), 
CONSTRAINT PK_Works_For PRIMARY KEY ( Client_ID, Org_Name, Org_Type ), 
CONSTRAINT FK_Works_For_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID), 
CONSTRAINT FK_Works_For_Organization FOREIGN KEY (Org_Name, Org_type) REFERENCES Organization ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Assistant')
CREATE TABLE Assistant ( Boss_ID int, First_Name varchar(50), Last_Name varchar(50), 
CONSTRAINT PK_Assists PRIMARY KEY ( Boss_ID ), 
CONSTRAINT FK_Assists_Boss_Client FOREIGN KEY (Boss_ID) REFERENCES Client (ID) )

GO

--creation of any views
-----------------------------------------------------------------------------------------------------------------------------
--creates a view that is used in the queryClientFull SP
CREATE VIEW viewAll
AS
SELECT ID, Prefix, Last_Name, First_Name, Middle_initial, Permit_Num, Active, Notes, Line1, Line2, City, State, Zip, Org_Name, Org_Type, Title FROM Client 
		FULL JOIN [Address] ON ID = Address.Client_ID
		FULL JOIN Works_For ON ID = Works_For.Client_ID
GO

--creation of any stored Procedures
-------------------------------------------------------------------------------------------------------------------------------


-- =============================================
-- Create date: 10/7/2019
-- Description:	verifies login
-- =============================================

CREATE OR ALTER PROCEDURE validateLogin

	-- Add the parameters for the stored procedure here
	@userName varchar(50), @givenPW varchar(64)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here

	DECLARE @isValid BIT
	IF EXISTS(SELECT * FROM Account WHERE @userName = [User_Name] AND @givenPW = [Password]) SET @isValid = 1
	ELSE SET @isValid = 0
	SELECT @isValid

END
GO
-- =============================================
-- Create date: 10/7/2019
-- Description:	Takes 3 variables and returns clients that begin with the given variables. Input variables are allowed to be nulled.
-- =============================================
CREAT OR ALTER PROCEDURE queryClientFull
	-- Add the parameters for the stored procedure here
	@lastName varchar(50) = '', @firstName nvarchar(30) = '',
	@orgType varchar(30) = '', @title varchar(20) = ''

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @orgType IS NULL SET @orgType = ''
	IF @lastName IS NULL SET @lastName = ''
	IF @firstName IS NULL SET @firstName = ''
	IF @title IS NULL SET @title = ''


	CREATE TABLE #searchResults (ID int, Prefix varchar(10), Last_Name varchar(50), First_Name varchar(50), Middle_initial varchar(1), Assistant_First_Name varchar(50), Assisntant_Last_Name varchar(50), Permit_Num varchar(10), Active bit, Notes varchar(30),
		Line1 varchar(35), Line2 varchar(35), City varchar(25), State varchar(2), Zip varChar(5), Org_Name varchar(30), Org_Type varchar(20), Title varchar(20))

	INSERT INTO #searchResults SELECT * FROM [viewAll]

	ALTER TABLE #searchResults ADD Personal_Email varchar(30), Business_Email varchar(30), Assistant_Email varchar(30), Personal_Phone varchar(11), Business_Phone varchar(11), Assistant_Phone varchar(30)

	UPDATE #searchResults SET Personal_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Email = (SELECT Email FROM Email WHERE Client_ID = ID AND Type = 'assistant')
	UPDATE #searchResults SET Personal_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'personal')
	UPDATE #searchResults SET Business_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'business')
	UPDATE #searchResults SET Assistant_Phone = (SELECT Number FROM Phone WHERE Client_ID = ID AND Type = 'assistant')

	SELECT ID, Prefix, Last_Name, First_Name, Middle_initial, Permit_Num, Assistant_First_Name, Assisntant_Last_Name, Active, Notes, ID AS 'Client_ID', Line1, Line2, City, State, Zip, ID AS 'Client_ID', Org_Name, Org_Type, Title, 
		ID AS 'Client_ID', Personal_Email, Business_Email, Assistant_Email, ID AS 'Client_ID', Personal_Phone, Business_Phone, Assistant_Phone FROM #searchResults
	WHERE First_Name LIKE (@firstName + '%') 
		AND Last_Name LIKE (@lastName + '%') 
		AND Org_type LIKE (@orgType + '%')
		AND Title LIKE (@title + '%') OR Title IS NULL
	ORDER BY Last_Name, First_Name, Middle_initial, Org_Type

	DROP TABLE #searchResults

END
GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	adds a client into the client table
-- =============================================

CREATE OR ALTER PROCEDURE addCLient

	-- Add the parameters for the stored procedure here
	@firstName varchar(50) = null, @lastName varchar(50) = null,
	@middleInitial varchar(1) = null, @permitNum varchar(50) = null,
	@active bit = 1, @notes varchar(30) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Client (First_Name, Last_Name, Middle_initial, Permit_Num, Active, Notes) VALUES (@firstName, @lastName, @middleInitial, @permitNum, @active, @notes)
	

END
GO

-- =============================================
-- Create date: 10/7/2019
-- Description:	checks for a near match and sends the match if difference is >=3. Also reports the client where the difference function is >=3
-- =============================================

CREATE OR ALTER PROCEDURE checkForNearMatch

	-- Add the parameters for the stored procedure here
	@firstName varchar(50) = null, @lastName varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	DECLARE @nearMatch BIT
	IF ((SELECT COUNT(First_Name) FROM Client WHERE DIFFERENCE(@firstName, First_Name) > 2 AND DIFFERENCE(@lastName, Last_Name) > 2) > 0) SET @nearMatch = 1
	ELSE SET @nearMatch = 0

	SELECT @nearMatch AS nearMatch

	SELECT First_Name, Last_Name FROM Client WHERE DIFFERENCE(@firstName, First_Name) > 2 AND DIFFERENCE(@lastName, Last_Name) > 2

END


-- =============================================
-- Create date: 10/9/2019
-- Description:	adds an Organization
-- =============================================

CREATE OR ALTER PROCEDURE addOrganization

	-- Add the parameters for the stored procedure here
	@name varchar(30) = null, 
	@type varchar(10) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Organization (Name,Type) VALUES (@name, @type)
	

END
GO

-- =============================================
-- Create date: 10/10/2019
-- Description:	Adds a user to the Account table
-- =============================================
CREATE OR ALTER PROCEDURE addAccount 
	-- Add the parameters for the stored procedure here
	@userName varchar(25), @password varchar(64) null,
	@userType char(1) = null, @office varchar(50) = null
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    	-- Insert statements for procedure here
	INSERT INTO Account(User_Name, Password, User_Type, Office) VALUES (@userName, @password, @userType, @office)
END
GO

-- =============================================
-- Create date: 10/12/2019
-- Description:	Returns a single client by searching for the ID
-- =============================================
CREATE OR ALTER   PROCEDURE getClientByID
	-- Add the parameters for the stored procedure here
    @Client_Id int

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	SELECT * FROM Client WHERE ID = @Client_Id 

END

GO
-- =============================================
-- Create date: 10/25/2019
-- Description:	updates tables based on parameters given
-- =============================================

Creat OR ALTER   PROCEDURE updateClient
	-- Add the parameters for the stored procedure here
	@ID int, @prefix varchar(10) = null, @firstName varchar(50),
	@lastName varchar(50), @middleInitial varchar(1) = null,
	@permitNum varchar(50) = null,
	@active bit = 1, @notes varchar(30) = '',
	@orgName varchar(30), @orgType varchar(20),
	@title varchar(20) = null, @Personal_phoneNumber varchar(11) = null,
	@Business_phoneNumber varchar(11) = null, @Personal_Email varchar(30) = null,
	@Business_Email varchar(30) = null, @Assistant_Email varchar(30) = null,
	@Assistant_phoneNumber varchar(11) = null, @line1 varchar(35) = null,
	@line2 varchar(35) = null, @city varchar(25) = null,
	@state varchar(2) = null, @zipCode varchar(5) = null,
	@assistantFirstName varchar(50) = null, @assistantLastName varchar(50) = null


	-- need to add personalPhone, businessPhone, personalEmail, businessEmail. phone number and email need to be removed.
	-- type isnt needed since its implied based on the parameter name.
	-- the types are stored as 'personal' and 'business' based on how addClient adds them in.
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- update values in the tables.
	IF @prefix IS NOT NULL
		UPDATE Client SET Prefix = @prefix WHERE ID = @ID
	IF @firstName IS NOT NULL 
		UPDATE Client SET First_Name = @firstName WHERE ID = @ID
	IF @lastName IS NOT NULL 
		UPDATE Client SET Last_Name = @lastName WHERE ID = @ID
	IF @middleInitial IS NOT NULL 
		UPDATE Client SET Middle_initial = @middleInitial WHERE ID = @ID
	IF @permitNum IS NOT NULL 
		UPDATE Client SET Permit_Num = @permitNum WHERE ID = @ID
	IF @active IS NOT NULL 
		UPDATE Client SET Active = @active WHERE ID = @ID
	IF @notes IS NOT NULL 
		UPDATE Client SET Notes = @notes WHERE ID = @ID
	-- 
	IF (SELECT COUNT(*) FROM Organization WHERE [Name] = @orgName AND [Type] = @orgType) = 0 AND (@orgName IS NOT NULL OR @orgType IS NOT NULL )
		INSERT INTO Organization([Name], [Type]) VALUES(@orgName, @orgType)
	IF @orgName IS NOT NULL OR @orgType IS NOT NULL 
		UPDATE Organization SET [Name] = @orgName, [Type] = @orgType 
			WHERE [Name] = @orgName AND [Type] = @orgType
	IF @title IS NOT NULL 
		UPDATE Works_For SET Title = @title 
			WHERE Client_ID = @ID AND Org_Name = @orgName AND Org_Type = @orgType
	--
	/*
	These need to be updated and new parameters need to be added to the begining of the procedure.
	type isnt needed since its implied based on the parameter name.
	the types are stored as 'personal' and 'business' based on how addClient adds them in.
	*/
	--------------------------------------------------------------------------------------------
	IF (SELECT COUNT(*) FROM Phone WHERE Client_ID = @ID AND [Type] = 'business') = 0 AND @Business_phoneNumber IS NOT NULL 
		INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'business', @Business_phoneNumber)
	IF @Business_phoneNumber IS NOT NULL 
		UPDATE Phone SET Number = @Business_phoneNumber 
			WHERE Client_ID = @ID AND [Type] = 'business'

	IF (SELECT COUNT(*) FROM Phone WHERE Client_ID = @ID AND [Type] = 'personal') = 0 AND @Personal_phoneNumber IS NOT NULL 
		INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'personal', @Personal_phoneNumber)
	IF @Personal_phoneNumber IS NOT NULL 
		UPDATE Phone SET Number = @Personal_phoneNumber 
			WHERE Client_ID = @ID AND [Type] = 'personal'
	--
	IF (SELECT COUNT(*) FROM Email WHERE Client_ID = @ID AND [Type] = 'business') = 0 AND @Business_email IS NOT NULL 
		INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'business', @Business_email)
	IF @Business_email IS NOT NULL 
		UPDATE Email SET Email = @Business_email 
			WHERE Client_ID = @ID AND [Type] = 'business'

	IF (SELECT COUNT(*) FROM Email WHERE Client_ID = @ID AND [Type] = 'personal') = 0 AND @Personal_email IS NOT NULL 
		INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'personal', @Personal_email)
	IF @Personal_email IS NOT NULL 
		UPDATE Email SET Email = @Personal_email 
			WHERE Client_ID = @ID AND [Type] = 'personal'
	
	---------------------------------------------------------------------------------------------
	--
	IF (SELECT COUNT(*) FROM [Address] WHERE Client_ID = @ID) = 0 AND (@line1 IS NOT NULL OR @line2 IS NOT NULL OR @city IS NOT NULL OR @state IS NOT NULL OR @zipCode IS NOT NULL )
		INSERT INTO Address(Client_ID, Line1, Line2, City, [State], Zip) VALUES(@ID, @line1, @line2, @city, @state, @zipCode)
	IF @line1 IS NOT NULL OR @line2 IS NOT NULL OR @city IS NOT NULL OR @state IS NOT NULL OR @zipCode IS NOT NULL 
		UPDATE [Address] SET Line1 = @line1, Line2 = @line2, City = @city, [State] = @state, Zip = @zipCode
			WHERE Client_ID = @ID 
	
	---------------------------------------------------------------------------------------------

	IF ((SELECT COUNT(*) FROM Assistant WHERE Boss_ID = @ID) = 0) AND (@assistantFirstName IS NOT NULL OR @assistantLastName IS NOT NULL OR @Assistant_Email IS NOT NULL OR @Assistant_phoneNumber IS NOT NULL)
		Begin	INSERT INTO Assistant(Boss_ID, First_Name, Last_Name) VALUES(@ID, @assistantFirstName, @assistantLastName) 
				INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'assistant', @Assistant_phoneNumber)
				INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'assistant', @Assistant_Email)
		END
	IF (@assistantFirstName IS NOT NULL OR @assistantLastName IS NOT NULL OR @Assistant_Email IS NOT NULL OR @Assistant_phoneNumber IS NOT NULL)
		Begin	INSERT INTO Assistant(Boss_ID, First_Name, Last_Name) VALUES(@ID, @assistantFirstName, @assistantLastName) 
				INSERT INTO Phone(Client_ID, [Type], Number) VALUES(@ID, 'assistant', @Assistant_phoneNumber)
				INSERT INTO Email(Client_ID, [Type], Email) VALUES(@ID, 'assistant', @Assistant_Email)
		END

	return @ID

END

-- =============================================
-- Create date: 10/16/2019
-- Description:	Updates active status
-- =============================================

CREATE OR ALTER PROCEDURE updateActiveStatus

	-- Add the parameters for the stored procedure here
	@ID int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here

	IF ((SELECT Active FROM Client Client WHERE @ID = ID) = 1) UPDATE Client SET Active = 0 WHERE @ID = ID
	ELSE UPDATE Client SET Active = 1

END
