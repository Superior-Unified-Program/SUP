USE [master]
GO

/*Create database*/
IF NOT EXISTS (SELECT * FROM master.dbo.sysdatabases WHERE '[' + name + ']' = 'SUPdb' OR name = 'SUPdb')
   exec('CREATE DATABASE [SUPdb] CONTAINMENT = NONE')
GO

/* create User If possible */
USE [master];

--CREATE LOGIN teamRADGSHAUser
IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = 'SUPuser')
   exec('CREATE LOGIN SUPuser WITH PASSWORD    = ''123'';')
GO

USE [SUPdb]

--create user
IF USER_ID('SUPuser') IS NULL exec('CREATE USER [SUPuser] FOR LOGIN [SUPuser]')
GO

--update roles
EXEC sys.sp_addrolemember
	@rolename = 'db_datareader',
	@membername = 'SUPuser'
EXEC sys.sp_addrolemember
	@rolename = 'db_datawriter',
	@membername = 'SUPuser'
EXEC sys.sp_addrolemember
	@rolename = 'db_owner',
	@membername = 'SUPuser'
GO

--create tables
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Account')
CREATE TABLE Account ( [User_Name] varchar(25), [Password] varchar(50), User_Type char, Failed_Login int, Office varchar(50), CONSTRAINT PK_Staff PRIMARY KEY ([User_Name]) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Client')
CREATE TABLE Client ( [ID] NUMERIC(4,0), Last_Name varchar(50), First_Name varchar(50), Middle_initial char, Permit_Num varchar(10), Active bit, Notes varchar(30), CONSTRAINT PK_Client PRIMARY KEY (ID) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Address')
CREATE TABLE Address ( Client_ID NUMERIC(4,0), Line1 varchar(35), Line2 varchar(35), City varchar(25), State char(2), Zip char(5), 
CONSTRAINT PK_Address PRIMARY KEY ( Line1, Line2, City, State, Zip ), 
CONSTRAINT FK_Address_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Phone')
CREATE TABLE Phone ( Client_ID NUMERIC(4,0), [Number] varchar(11), CONSTRAINT PK_Phone PRIMARY KEY ( Client_ID, Number ),
CONSTRAINT FK_Phone_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Email')
CREATE TABLE Email ( Client_ID NUMERIC(4,0), [Email] varchar(30), CONSTRAINT PK_Email PRIMARY KEY ( Client_ID, Email ), 
CONSTRAINT FK_Email_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID)  )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Organization')
CREATE TABLE Organization ( [Name] varchar(30), [Type] varchar(10), 
CONSTRAINT PK_Organization PRIMARY KEY ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Works_For')
CREATE TABLE Works_For ( Client_ID NUMERIC(4,0), Org_Name varchar(30), Org_Type varchar(10), Title varchar(20), 
CONSTRAINT PK_Works_For PRIMARY KEY ( Client_ID, Org_Name, Org_Type ), 
CONSTRAINT FK_Works_For_Client FOREIGN KEY (Client_ID) REFERENCES Client (ID), 
CONSTRAINT FK_Works_For_Organization FOREIGN KEY (Org_Name, Org_type) REFERENCES Organization ( [Name], [Type] ) )

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES
           WHERE TABLE_NAME = 'Assists')
CREATE TABLE Assists ( Boss_ID NUMERIC(4,0), Assistant_ID NUMERIC(4,0), Notes varchar(30), 
CONSTRAINT PK_Assists PRIMARY KEY ( Boss_ID, Assistant_ID ), 
CONSTRAINT FK_Assists_Boss_Client FOREIGN KEY (Boss_ID) REFERENCES Client (ID), 
CONSTRAINT FK_Assists_Assustant_Client FOREIGN KEY (Assistant_ID) REFERENCES Client (ID) )

GO

CREATE PROCEDURE Verify_Login @username nvarchar(25), @password varchar(50) AS BEGIN IF EXISTS (SELECT User_Name, User_Type FROM Account WHERE User_Name = @username AND Password = @password) BEGIN SELECT User_Name, User_Type, Failed_Login FROM Account WHERE User_Name = @username AND Password = @password END ELSE BEGIN IF EXISTS (SELECT User_Name, User_Type FROM Account WHERE User_Name = @username) BEGIN UPDATE Account SET Failed_Login = Failed_Login + 1 WHERE User_Name = @username END END END

GO

CREATE PROCEDURE SearchAdvance_Clients @firstName varchar(50), @lastName varchar(50) AS BEGIN SELECT Client.First_Name, Client.Last_Name FROM Account INNER JOIN Works_For ON Client.ID = Works_For.Client_ID WHERE First_Name LIKE '%' + @firstName + '%' OR Last_Name LIKE '%' + @lastName + '%' END

GO

CREATE PROCEDURE Get_Failed_Attempts @userName varchar(25) AS BEGIN SELECT Failed_Login FROM Account WHERE [User_Name] = @userName END

GO

USE [HRAS_iTas] CREATE LOGIN HRAS_MW_iTas
WITH PASSWORD = 'ZMNv01X';
GO

USE [HRAS_iTas] CREATE USER HRAS_MW_iTas FOR LOGIN HRAS_MW_iTas;
GO

ALTER LOGIN HRAS_MW_iTas ENABLE;
GO

USE [HRAS_iTas] GRANT EXECUTE ON OBJECT::Import_Item TO HRAS_MW_iTas;
GO

USE [HRAS_iTas] INSERT INTO Account ([User_Name], [Password], [User_Type], [Failed_Login]) VALUES('admin', 'W6ph5Mm5Pz8GgiULbPgzG37mj9g=', 'A', 0)
